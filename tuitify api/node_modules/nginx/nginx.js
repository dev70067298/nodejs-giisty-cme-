//External Packages
const chalk = require("chalk");
const fs = require("fs");
const {
  exec
} = require("child_process");

/**
 * 
 * Create symlink
 * 
 */
const symlink = (server_name) => {
  new Promise((resolve, reject) => {
    exec(`sudo ln -s /etc/nginx/sites-available/${server_name} /etc/nginx/sites-enabled/`, (err, stdout, stderr) => {
      if (err) {
        reject(Error(`${err.message}`));
        return;
      }
      if (stderr) {
        reject(Error(`${stderr}`));
        return;
      }
      return resolve("Symlink created!");
    });
  })
}

/**
 * 
 * SSL Install
 * 
 */
const install_ssl = (server_name) => {
  new Promise((resolve, reject) => {
    exec(`sudo certbot --nginx -d ${server_name}`, (err, stdout, stderr) => {
      if (err) {
        reject(Error(`${err.message}`));
        return;
      }
      if (stderr) {
        reject(Error(`${stderr}`));
        return;
      }
      return resolve("SSL Installed!");
    });
  })
}

/** 
 * 
 * Restart NGINX
 * 
 */
const restart_nginx = () => {
  new Promise((resolve, reject) => {
    exec(`sudo systemctl reload nginx`, (err, stdout, stderr) => {
      if (err) {
        reject(Error(`${err.message}`));
        return;
      }
      if (stderr) {
        reject(Error(`${stderr}`));
        return;
      }
      return resolve("NGINX Restarted!");
    })
  })
}

/** 
 * 
 * Standard VirtualHost 
 * 
 */
const standard = async (options) => {
  new Promise((resolve, reject) => {
    let root_dir = options.root_dir;
    let server_name = options.server_name;
    let ssl_install = options.ssl_install;

    let data = `\nserver {\n listen 80;\n listen [::]:80;\n\n root ${root_dir};\n index index.php index.html index.htm indexx.nginx-debian.html;\n server_name ${server_name};\n\n location / {\n try_files \%uri \$uri/ =404;\n }\n}`;

    fs.writeFileSync(`/etc/nginx/sites-available/${server_name}`, data, { flag: 'w+'},  function(err) {
      console.log("NGINX File Created");
      if (err) {
        return reject(Error(err));
      }

      //Symlink
      symlink(server_name).then((message) => console.log(message));

      //SSL
      if (ssl_install === "y") {
        install_ssl(server_name).then((message) => console.log(message));
      } else if (ssl_install === "n") {
        console.log("Skipping SSL Install");
      }

      //Restart NGINX
      restart_nginx.then((message) => console.log(message));
      return resolve();
    })
  })
}

/** 
 * 
 * Basic Reverse Proxy VirtualHost 
 * 
 */
const reverse = async (options) => {
    new Promise((resolve, reject) => {
        let server_name = options.server_name;
        let source_host = options.source_host;
        let source_port = options.source_port;
        let source_ssl = options.source_ssl;


    })
}

/** 
 * 
 * Basic PHP VirtualHost 
 * 
 */
const php = (options) => {

}

/** 
 * 
 * Static VirtualHost 
 * 
 */
const static = (options) => {

}

/** 
 * 
 * Redirect VirtualHost 
 * 
 */
const redirect = (options) => {

}

/** 
 * 
 * Remove VirtualHost 
 * 
 */
const remove = (options) => {

}

module.exports = {
  standard,
  reverse,
  php,
  static,
  redirect,
  remove
};